<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimism on Dominik Dabrowski</title>
    <link>https://doda.co/tags/optimism/</link>
    <description>Recent content in Optimism on Dominik Dabrowski</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://doda.co/tags/optimism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>32 Optimistic Charts: The World is Getting Better</title>
      <link>https://doda.co/writing/32-optimistic-charts/</link>
      <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://doda.co/writing/32-optimistic-charts/</guid>
      <description>&lt;p&gt;The world often feels like it&amp;rsquo;s falling apart, but the data tells a different story. Here are 32 charts showing measurable human progress across health, education, technology, environment, and human rights.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Last updated: 2025-08-17&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;16-bad-things-that-are-decreasing&#34;&gt;&#xA;  16 Bad Things That Are Decreasing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-bad-things-that-are-decreasing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;charts-grid&#34;&gt;&#xA;&lt;div class=&#34;chart-section&#34;&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;legal-slavery&#34;&gt;&#xA;  Legal Slavery&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#legal-slavery&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Number of countries where slavery is legal&lt;/p&gt;&#xA;&lt;div class=&#34;chart-container&#34; id=&#34;chart-legal-slavery&#34;&gt;&lt;div class=&#34;chart-visualization&#34; id=&#34;chart-viz-legal-slavery&#34;&gt;&lt;/div&gt;&#xA;  &lt;script&gt;&#xA;    (function() {&#xA;      const data = [{year:  1800 , value:  194 },{year:  1820 , value:  189 },{year:  1840 , value:  174 },{year:  1860 , value:  165 },{year:  1880 , value:  160 },{year:  1900 , value:  158 },{year:  1920 , value:  157 },{year:  1940 , value:  145 },{year:  1960 , value:  102 },{year:  1980 , value:  54 },{year:  2000 , value:  15 },{year:  2017 , value:  3 },];&#xA;      &#xA;      const direction = &#34;down&#34;;&#xA;      &#xA;      &#xA;      &#xA;      &#xA;      let startPoint, currentPoint;&#xA;      if (direction === &#34;down&#34;) {&#xA;        startPoint = data.reduce((max, p) =&gt; p.value &gt; max.value ? p : max);&#xA;      } else {&#xA;        startPoint = data.reduce((min, p) =&gt; p.value &lt; min.value ? p : min);&#xA;      }&#xA;      currentPoint = data[data.length - 1];&#xA;      &#xA;      const showArrow = Math.abs(startPoint.value - currentPoint.value) &gt; 0.01 &amp;&amp; &#xA;                       startPoint.year !== currentPoint.year;&#xA;      &#xA;      &#xA;      const margin = {top: 45, right: 40, bottom: 40, left: 50};&#xA;      const width = 500 - margin.left - margin.right;&#xA;      const height = 120;&#xA;      const svgHeight = 250; &#xA;      &#xA;      &#xA;      const container = document.getElementById(&#34;chart-viz-legal-slavery&#34;);&#xA;      const svg = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;svg&#34;);&#xA;      svg.setAttribute(&#34;width&#34;, &#34;100%&#34;);&#xA;      svg.setAttribute(&#34;height&#34;, svgHeight);&#xA;      svg.setAttribute(&#34;viewBox&#34;, `0 0 500 ${svgHeight}`);&#xA;      svg.style.fontFamily = &#34;Helvetica, Arial, sans-serif&#34;;&#xA;      svg.style.fontSize = &#34;10px&#34;;&#xA;      &#xA;      &#xA;      const xExtent = [Math.min(...data.map(d =&gt; d.year)), Math.max(...data.map(d =&gt; d.year))];&#xA;      const yExtent = [0, Math.max(...data.map(d =&gt; d.value))];&#xA;      &#xA;      const xScale = (year) =&gt; margin.left + ((year - xExtent[0]) / (xExtent[1] - xExtent[0])) * width;&#xA;      const yScale = (value) =&gt; margin.top + ((yExtent[1] - value) / (yExtent[1] - yExtent[0])) * height;&#xA;      &#xA;      &#xA;      let areaPath = `M ${xScale(data[0].year)} ${yScale(0)}`;&#xA;      data.forEach(d =&gt; {&#xA;        areaPath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;      });&#xA;      areaPath += ` L ${xScale(data[data.length - 1].year)} ${yScale(0)} Z`;&#xA;      &#xA;      &#xA;      const area = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;      area.setAttribute(&#34;d&#34;, areaPath);&#xA;      area.setAttribute(&#34;fill&#34;, &#34;#93432c&#34;);&#xA;      area.setAttribute(&#34;fill-opacity&#34;, &#34;0.1&#34;);&#xA;      svg.appendChild(area);&#xA;      &#xA;      &#xA;      let linePath = `M ${xScale(data[0].year)} ${yScale(data[0].value)}`;&#xA;      data.slice(1).forEach(d =&gt; {&#xA;        linePath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;      });&#xA;      &#xA;      &#xA;      const line = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;      line.setAttribute(&#34;d&#34;, linePath);&#xA;      line.setAttribute(&#34;stroke&#34;, &#34;#6b3a24&#34;);&#xA;      line.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;      line.setAttribute(&#34;fill&#34;, &#34;none&#34;);&#xA;      svg.appendChild(line);&#xA;      &#xA;      &#xA;      const xAxisY = yScale(0);&#xA;      &#xA;      &#xA;      const xTicks = [&#xA;        xExtent[0], &#xA;        Math.round((xExtent[0] + xExtent[1]) / 2), &#xA;        xExtent[1]&#xA;      ];&#xA;      &#xA;      xTicks.forEach(year =&gt; {&#xA;        const x = xScale(year);&#xA;        &#xA;        &#xA;        const tick = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;line&#34;);&#xA;        tick.setAttribute(&#34;x1&#34;, x);&#xA;        tick.setAttribute(&#34;y1&#34;, xAxisY);&#xA;        tick.setAttribute(&#34;x2&#34;, x);&#xA;        tick.setAttribute(&#34;y2&#34;, xAxisY + 3);&#xA;        tick.setAttribute(&#34;stroke&#34;, &#34;#93432c&#34;);&#xA;        tick.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;        svg.appendChild(tick);&#xA;        &#xA;        &#xA;        const label = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        label.setAttribute(&#34;x&#34;, x);&#xA;        label.setAttribute(&#34;y&#34;, xAxisY + 15);&#xA;        label.setAttribute(&#34;text-anchor&#34;, &#34;middle&#34;);&#xA;        label.setAttribute(&#34;font-size&#34;, &#34;10&#34;);&#xA;        label.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        label.setAttribute(&#34;fill&#34;, &#34;#93432c&#34;);&#xA;        label.textContent = year;&#xA;        svg.appendChild(label);&#xA;      });&#xA;      &#xA;      &#xA;      const xAxisLine = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;line&#34;);&#xA;      xAxisLine.setAttribute(&#34;x1&#34;, margin.left);&#xA;      xAxisLine.setAttribute(&#34;y1&#34;, xAxisY);&#xA;      xAxisLine.setAttribute(&#34;x2&#34;, margin.left + width);&#xA;      xAxisLine.setAttribute(&#34;y2&#34;, xAxisY);&#xA;      xAxisLine.setAttribute(&#34;stroke&#34;, &#34;#93432c&#34;);&#xA;      xAxisLine.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;      svg.appendChild(xAxisLine);&#xA;&#xA;      &#xA;      &#xA;      &#xA;      if (showArrow) {&#xA;        const progressData = data.filter(d =&gt; d.year &gt;= startPoint.year &amp;&amp; d.year &lt;= currentPoint.year);&#xA;        let progressPath = `M ${xScale(progressData[0].year)} ${yScale(progressData[0].value)}`;&#xA;        progressData.slice(1).forEach(d =&gt; {&#xA;          progressPath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;        });&#xA;        &#xA;        const progressLine = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;        progressLine.setAttribute(&#34;d&#34;, progressPath);&#xA;        progressLine.setAttribute(&#34;stroke&#34;, &#34;#6b3a24&#34;);&#xA;        progressLine.setAttribute(&#34;stroke-width&#34;, &#34;4&#34;);&#xA;        progressLine.setAttribute(&#34;stroke-opacity&#34;, &#34;0.8&#34;);&#xA;        progressLine.setAttribute(&#34;fill&#34;, &#34;none&#34;);&#xA;        progressLine.setAttribute(&#34;marker-end&#34;, &#34;url(#arrow)&#34;);&#xA;        svg.appendChild(progressLine);&#xA;        &#xA;        &#xA;        const startDot = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;circle&#34;);&#xA;        startDot.setAttribute(&#34;cx&#34;, xScale(startPoint.year));&#xA;        startDot.setAttribute(&#34;cy&#34;, yScale(startPoint.value));&#xA;        startDot.setAttribute(&#34;r&#34;, &#34;3&#34;);&#xA;        startDot.setAttribute(&#34;fill&#34;, &#34;#6b3a24&#34;);&#xA;        startDot.setAttribute(&#34;stroke&#34;, &#34;#fff3dd&#34;);&#xA;        startDot.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;        svg.appendChild(startDot);&#xA;        &#xA;        &#xA;        const defs = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;defs&#34;);&#xA;        const marker = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;marker&#34;);&#xA;        marker.setAttribute(&#34;id&#34;, &#34;arrow&#34;);&#xA;        marker.setAttribute(&#34;viewBox&#34;, &#34;0 0 7 6&#34;);&#xA;        marker.setAttribute(&#34;refX&#34;, &#34;0&#34;);&#xA;        marker.setAttribute(&#34;refY&#34;, &#34;3&#34;);&#xA;        marker.setAttribute(&#34;markerWidth&#34;, &#34;4&#34;);&#xA;        marker.setAttribute(&#34;markerHeight&#34;, &#34;3&#34;);&#xA;        marker.setAttribute(&#34;orient&#34;, &#34;auto&#34;);&#xA;        marker.setAttribute(&#34;markerUnits&#34;, &#34;strokeWidth&#34;);&#xA;        &#xA;        const arrowPath = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;        arrowPath.setAttribute(&#34;d&#34;, &#34;M0,0 L0,6 L7,3 z&#34;);&#xA;        arrowPath.setAttribute(&#34;fill&#34;, &#34;#6b3a24&#34;);&#xA;        arrowPath.setAttribute(&#34;fill-opacity&#34;, &#34;0.8&#34;);&#xA;        marker.appendChild(arrowPath);&#xA;        defs.appendChild(marker);&#xA;        svg.insertBefore(defs, svg.firstChild);&#xA;        &#xA;        &#xA;        const config = (direction === &#34;down&#34;)&#xA;          ? { start: &#34;below&#34;, end: &#34;above&#34; }&#xA;          : { start: &#34;above&#34;, end: &#34;below&#34; };&#xA;&#xA;        &#xA;        const override ={};&#xA;        &#xA;        const parsedOverride = typeof override === &#39;string&#39; ? JSON.parse(override) : override;&#xA;        if (parsedOverride.start) config.start = parsedOverride.start;&#xA;        if (parsedOverride.end) config.end = parsedOverride.end;&#xA;        &#xA;        try { container.dataset.override = JSON.stringify(parsedOverride); } catch (e) {}&#xA;&#xA;        &#xA;        let distanceAbove = 24;   &#xA;        let distanceBelow = 12;   &#xA;        let distanceHoriz = 10;   &#xA;        &#xA;        if (parsedOverride.distance !== undefined) { distanceAbove = parsedOverride.distance; distanceBelow = parsedOverride.distance; distanceHoriz = parsedOverride.distance; }&#xA;        if (parsedOverride.distanceAbove !== undefined) distanceAbove = parsedOverride.distanceAbove;&#xA;        if (parsedOverride.distanceBelow !== undefined) distanceBelow = parsedOverride.distanceBelow;&#xA;        if (parsedOverride.distanceHorizontal !== undefined) distanceHoriz = parsedOverride.distanceHorizontal;&#xA;&#xA;        &#xA;        const mapSideToBase = (side) =&gt; (side === &#39;above&#39; ? distanceAbove : side === &#39;below&#39; ? distanceBelow : distanceHoriz);&#xA;        let startDistance = (parsedOverride.distanceStart !== undefined) ? parsedOverride.distanceStart : mapSideToBase(config.start);&#xA;        let endDistance = (parsedOverride.distanceEnd !== undefined) ? parsedOverride.distanceEnd : mapSideToBase(config.end);&#xA;        &#xA;        startDistance = Number(startDistance);&#xA;        endDistance = Number(endDistance);&#xA;&#xA;        &#xA;        const labelGap = 12;&#xA;&#xA;        &#xA;        const allowedSides = [&#39;above&#39;,&#39;below&#39;,&#39;left&#39;,&#39;right&#39;];&#xA;        const fallbackStart = (direction === &#39;down&#39;) ? &#39;below&#39; : &#39;above&#39;;&#xA;        const fallbackEnd = (direction === &#39;down&#39;) ? &#39;above&#39; : &#39;below&#39;;&#xA;        if (!allowedSides.includes(config.start)) {&#xA;          console &amp;&amp; console.warn &amp;&amp; console.warn(`Unknown start side &#39;${config.start}&#39; for ${&#39;legal-slavery&#39;}; falling back to ${fallbackStart}`);&#xA;          config.start = fallbackStart;&#xA;        }&#xA;        if (!allowedSides.includes(config.end)) {&#xA;          console &amp;&amp; console.warn &amp;&amp; console.warn(`Unknown end side &#39;${config.end}&#39; for ${&#39;legal-slavery&#39;}; falling back to ${fallbackEnd}`);&#xA;          config.end = fallbackEnd;&#xA;        }&#xA;&#xA;        &#xA;        const percentageCharts = [&#39;child-mortality&#39;, &#39;hunger&#39;, &#39;extreme-poverty&#39;, &#39;protected-areas&#39;, &#39;protected-land&#39;, &#39;literacy&#39;, &#39;girls-school&#39;, &#39;electricity&#39;, &#39;mobile-phones&#39;, &#39;water-access&#39;, &#39;internet&#39;, &#39;renewable-energy&#39;, &#39;comprehensive-vaccination&#39;, &#39;child-cancer-survival&#39;];&#xA;        const isPercentageChart = percentageCharts.includes(&#39;legal-slavery&#39;);&#xA;        &#xA;        const formatValue = (value) =&gt; {&#xA;          &#xA;          let formatted;&#xA;          if (value &lt; 0.1 &amp;&amp; value &gt; 0) {&#xA;            formatted = value.toFixed(2);&#xA;          } else {&#xA;            formatted = value.toFixed(1);&#xA;          }&#xA;          const cleanFormatted = formatted.endsWith(&#39;.0&#39;) ? formatted.slice(0, -2) : formatted;&#xA;          return isPercentageChart ? cleanFormatted + &#39;%&#39; : cleanFormatted;&#xA;        };&#xA;        &#xA;        const anchorForSide = (side) =&gt; (side === &#39;left&#39; ? &#39;end&#39; : side === &#39;right&#39; ? &#39;start&#39; : &#39;middle&#39;);&#xA;        const createText = (x, y, text, opts = {}) =&gt; {&#xA;          const el = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;          el.setAttribute(&#39;x&#39;, x);&#xA;          el.setAttribute(&#39;y&#39;, y);&#xA;          if (opts.anchor) el.setAttribute(&#39;text-anchor&#39;, opts.anchor);&#xA;          if (opts.size) el.setAttribute(&#39;font-size&#39;, String(opts.size));&#xA;          if (opts.weight) el.setAttribute(&#39;font-weight&#39;, opts.weight);&#xA;          el.setAttribute(&#39;font-family&#39;, &#39;Helvetica, Arial, sans-serif&#39;);&#xA;          if (opts.fill) el.setAttribute(&#39;fill&#39;, opts.fill);&#xA;          if (opts.class) el.setAttribute(&#39;class&#39;, opts.class);&#xA;          el.textContent = text;&#xA;          return el;&#xA;        };&#xA;&#xA;        &#xA;&#xA;        &#xA;        const getLabelPosition = (point, position, distance) =&gt; {&#xA;          const actualPointY = yScale(point.value);&#xA;          const pointX = xScale(point.year);&#xA;          &#xA;          &#xA;          let pointY = actualPointY;&#xA;          if (position === &#34;above&#34; || position === &#34;below&#34;) {&#xA;            &#xA;            pointY = Math.max(margin.top + 10, actualPointY);&#xA;          } else {&#xA;            &#xA;            pointY = Math.max(margin.top + 10, Math.min(actualPointY, margin.top + height - 25));&#xA;          }&#xA;          &#xA;          if (position === &#34;above&#34;) {&#xA;            return {&#xA;              valueY: Math.max(5, pointY - distance),&#xA;              yearY: Math.max(17, pointY - (distance - labelGap)),&#xA;              x: pointX&#xA;            };&#xA;          } else if (position === &#34;below&#34;) {&#xA;            return {&#xA;              valueY: Math.min(margin.top + height - 15, pointY + distance),&#xA;              yearY: Math.min(margin.top + height - 3, pointY + distance + labelGap),&#xA;              x: pointX&#xA;            };&#xA;          } else if (position === &#34;left&#34;) {&#xA;            return {&#xA;              valueY: pointY - 6,&#xA;              yearY: pointY + 6,&#xA;              x: Math.max(margin.left + distance, pointX - distance)&#xA;            };&#xA;          } else if (position === &#34;right&#34;) {&#xA;            return {&#xA;              valueY: pointY - 6,&#xA;              yearY: pointY + 6,&#xA;              x: Math.min(margin.left + width - distance, pointX + distance)&#xA;            };&#xA;          }&#xA;        };&#xA;        &#xA;        &#xA;        const startPos = getLabelPosition(startPoint, config.start, startDistance);&#xA;        const startAnchor = anchorForSide(config.start);&#xA;        const startValueLabel = createText(startPos.x, startPos.valueY, formatValue(startPoint.value), {&#xA;          anchor: startAnchor, size: 18, weight: &#39;bold&#39;, fill: &#39;#6b3a24&#39;, class: &#39;chart-label chart-label-value&#39;&#xA;        });&#xA;        const startYearLabel = createText(startPos.x, startPos.yearY, String(startPoint.year), {&#xA;          anchor: startAnchor, size: 14, fill: &#39;#93432c&#39;, class: &#39;chart-label chart-label-year&#39;&#xA;        });&#xA;        svg.appendChild(startValueLabel);&#xA;        svg.appendChild(startYearLabel);&#xA;&#xA;        &#xA;        const endPos = getLabelPosition(currentPoint, config.end, endDistance);&#xA;        const endAnchor = anchorForSide(config.end);&#xA;        const endValueLabel = createText(endPos.x, endPos.valueY, formatValue(currentPoint.value), {&#xA;          anchor: endAnchor, size: 18, weight: &#39;bold&#39;, fill: &#39;#6b3a24&#39;, class: &#39;chart-label chart-label-value&#39;&#xA;        });&#xA;        const endYearLabel = createText(endPos.x, endPos.yearY, String(currentPoint.year), {&#xA;          anchor: endAnchor, size: 14, fill: &#39;#93432c&#39;, class: &#39;chart-label chart-label-year&#39;&#xA;        });&#xA;        svg.appendChild(endValueLabel);&#xA;        svg.appendChild(endYearLabel);&#xA;&#xA;        &#xA;&#xA;        &#xA;        if (config.start === &#39;left&#39; || config.start === &#39;right&#39;) {&#xA;          const sx = (config.start === &#39;right&#39;)&#xA;            ? Math.min(margin.left + width - startDistance, xScale(startPoint.year) + startDistance)&#xA;            : Math.max(margin.left + startDistance, xScale(startPoint.year) - startDistance);&#xA;          startValueLabel.setAttribute(&#39;x&#39;, sx);&#xA;          startYearLabel.setAttribute(&#39;x&#39;, sx);&#xA;        }&#xA;        if (config.end === &#39;left&#39; || config.end === &#39;right&#39;) {&#xA;          const ex = (config.end === &#39;right&#39;)&#xA;            ? Math.min(margin.left + width - endDistance, xScale(currentPoint.year) + endDistance)&#xA;            : Math.max(margin.left + endDistance, xScale(currentPoint.year) - endDistance);&#xA;          endValueLabel.setAttribute(&#39;x&#39;, ex);&#xA;          endYearLabel.setAttribute(&#39;x&#39;, ex);&#xA;        }&#xA;&#xA;        &#xA;        try {&#xA;          const chartId = &#34;legal-slavery&#34;;&#xA;          const spx = xScale(startPoint.year);&#xA;          const epx = xScale(currentPoint.year);&#xA;          &#xA;          container.parentElement?.setAttribute(&#39;data-chart-id&#39;, chartId);&#xA;          container.parentElement?.setAttribute(&#39;data-start-side&#39;, String(config.start));&#xA;          container.parentElement?.setAttribute(&#39;data-end-side&#39;, String(config.end));&#xA;          container.parentElement?.setAttribute(&#39;data-start-distance&#39;, String(startDistance));&#xA;          container.parentElement?.setAttribute(&#39;data-end-distance&#39;, String(endDistance));&#xA;          container.parentElement?.setAttribute(&#39;data-start-point-x&#39;, String(spx));&#xA;          container.parentElement?.setAttribute(&#39;data-end-point-x&#39;, String(epx));&#xA;          container.parentElement?.setAttribute(&#39;data-start-label-x&#39;, String(startValueLabel.getAttribute(&#39;x&#39;)));&#xA;          container.parentElement?.setAttribute(&#39;data-end-label-x&#39;, String(endValueLabel.getAttribute(&#39;x&#39;)));&#xA;&#xA;          &#xA;          startValueLabel.setAttribute(&#39;data-role&#39;, &#39;start-value&#39;);&#xA;          startYearLabel.setAttribute(&#39;data-role&#39;, &#39;start-year&#39;);&#xA;          endValueLabel.setAttribute(&#39;data-role&#39;, &#39;end-value&#39;);&#xA;          endYearLabel.setAttribute(&#39;data-role&#39;, &#39;end-year&#39;);&#xA;          startValueLabel.setAttribute(&#39;data-x&#39;, String(startValueLabel.getAttribute(&#39;x&#39;)));&#xA;          endValueLabel.setAttribute(&#39;data-x&#39;, String(endValueLabel.getAttribute(&#39;x&#39;)));&#xA;&#xA;          &#xA;          if (console &amp;&amp; console.debug) {&#xA;            console.debug(`[chart ${chartId}] start: side=${config.start}, dist=${startDistance}, pointX=${spx}, labelX=${startValueLabel.getAttribute(&#39;x&#39;)}`);&#xA;            console.debug(`[chart ${chartId}]   end: side=${config.end}, dist=${endDistance}, pointX=${epx}, labelX=${endValueLabel.getAttribute(&#39;x&#39;)}`);&#xA;          }&#xA;        } catch (_) {}&#xA;&#xA;      }&#xA;      &#xA;      container.appendChild(svg);&#xA;    })();&#xA;  &lt;/script&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;chart-section&#34;&gt;&#xA;&lt;div class=&#34;chart-section-header&#34;&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;maternal-deaths&#34;&gt;&#xA;  Maternal Deaths&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maternal-deaths&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Deaths per 100,000 live births&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
