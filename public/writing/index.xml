<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writings on Dominik Dabrowski</title>
    <link>http://localhost:1313/writing/</link>
    <description>Recent content in Writings on Dominik Dabrowski</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/writing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>32 Optimistic Charts: The World is Getting Better</title>
      <link>http://localhost:1313/writing/32-optimistic-charts/</link>
      <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writing/32-optimistic-charts/</guid>
      <description>&lt;p&gt;The world often feels like it&amp;rsquo;s falling apart, but the data tells a different story. Here are 32 charts showing measurable human progress across health, education, technology, environment, and human rights.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Last updated: 2025-08-17&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;16-bad-things-that-are-decreasing&#34;&gt;&#xA;  16 Bad Things That Are Decreasing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#16-bad-things-that-are-decreasing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;charts-grid&#34;&gt;&#xA;&lt;div class=&#34;chart-section&#34;&gt;&#xA;&lt;div class=&#34;chart-section-header&#34;&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;maternal-deaths&#34;&gt;&#xA;  Maternal Deaths&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maternal-deaths&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Deaths per 100,000 live births&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;chart-container&#34; id=&#34;chart-maternal-mortality&#34;&gt;&lt;div class=&#34;chart-visualization&#34; id=&#34;chart-viz-maternal-mortality&#34;&gt;&lt;/div&gt;&#xA;  &lt;script&gt;&#xA;    (function() {&#xA;      const data = [{year:  1985 , value:  428.5482 },{year:  1986 , value:  410.23654 },{year:  1987 , value:  401.5882 },{year:  1988 , value:  396.0917 },{year:  1989 , value:  384.8084 },{year:  1990 , value:  370.27313 },{year:  1991 , value:  378.09518 },{year:  1992 , value:  386.26517 },{year:  1993 , value:  385.65283 },{year:  1994 , value:  375.2249 },{year:  1995 , value:  373.19336 },{year:  1996 , value:  372.66693 },{year:  1997 , value:  365.62094 },{year:  1998 , value:  362.9174 },{year:  1999 , value:  343.77753 },{year:  2000 , value:  334.10532 },{year:  2001 , value:  329.2917 },{year:  2002 , value:  317.67972 },{year:  2003 , value:  307.0511 },{year:  2004 , value:  299.8426 },{year:  2005 , value:  291.26068 },{year:  2006 , value:  276.11456 },{year:  2007 , value:  270.64816 },{year:  2008 , value:  265.16806 },{year:  2009 , value:  258.04745 },{year:  2010 , value:  248.80334 },{year:  2011 , value:  241.46191 },{year:  2012 , value:  231.28264 },{year:  2013 , value:  228.95949 },{year:  2014 , value:  223.14148 },{year:  2015 , value:  219.4542 },{year:  2016 , value:  215.49913 },{year:  2017 , value:  213.16835 },{year:  2018 , value:  215.09969 },{year:  2019 , value:  214.92525 },{year:  2020 , value:  212.23637 },];&#xA;      &#xA;      const direction = &#34;down&#34;;&#xA;      &#xA;      &#xA;      let startPoint, currentPoint;&#xA;      if (direction === &#34;down&#34;) {&#xA;        startPoint = data.reduce((max, p) =&gt; p.value &gt; max.value ? p : max);&#xA;      } else {&#xA;        startPoint = data.reduce((min, p) =&gt; p.value &lt; min.value ? p : min);&#xA;      }&#xA;      currentPoint = data[data.length - 1];&#xA;      &#xA;      const showArrow = Math.abs(startPoint.value - currentPoint.value) &gt; 0.01 &amp;&amp; &#xA;                       startPoint.year !== currentPoint.year;&#xA;      &#xA;      &#xA;      const margin = {top: 20, right: 20, bottom: 40, left: 50};&#xA;      const width = 500 - margin.left - margin.right;&#xA;      const height = 120;&#xA;      const svgHeight = 250; &#xA;      &#xA;      &#xA;      const container = document.getElementById(&#34;chart-viz-maternal-mortality&#34;);&#xA;      const svg = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;svg&#34;);&#xA;      svg.setAttribute(&#34;width&#34;, &#34;100%&#34;);&#xA;      svg.setAttribute(&#34;height&#34;, svgHeight);&#xA;      svg.setAttribute(&#34;viewBox&#34;, `0 0 500 ${svgHeight}`);&#xA;      svg.style.fontFamily = &#34;Helvetica, Arial, sans-serif&#34;;&#xA;      svg.style.fontSize = &#34;10px&#34;;&#xA;      &#xA;      &#xA;      const xExtent = [Math.min(...data.map(d =&gt; d.year)), Math.max(...data.map(d =&gt; d.year))];&#xA;      const yExtent = [0, Math.max(...data.map(d =&gt; d.value))];&#xA;      &#xA;      const xScale = (year) =&gt; margin.left + ((year - xExtent[0]) / (xExtent[1] - xExtent[0])) * width;&#xA;      const yScale = (value) =&gt; margin.top + ((yExtent[1] - value) / (yExtent[1] - yExtent[0])) * height;&#xA;      &#xA;      &#xA;      let areaPath = `M ${xScale(data[0].year)} ${yScale(0)}`;&#xA;      data.forEach(d =&gt; {&#xA;        areaPath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;      });&#xA;      areaPath += ` L ${xScale(data[data.length - 1].year)} ${yScale(0)} Z`;&#xA;      &#xA;      &#xA;      const area = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;      area.setAttribute(&#34;d&#34;, areaPath);&#xA;      area.setAttribute(&#34;fill&#34;, &#34;#f5f5f5&#34;);&#xA;      area.setAttribute(&#34;fill-opacity&#34;, &#34;0.6&#34;);&#xA;      svg.appendChild(area);&#xA;      &#xA;      &#xA;      let linePath = `M ${xScale(data[0].year)} ${yScale(data[0].value)}`;&#xA;      data.slice(1).forEach(d =&gt; {&#xA;        linePath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;      });&#xA;      &#xA;      &#xA;      const line = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;      line.setAttribute(&#34;d&#34;, linePath);&#xA;      line.setAttribute(&#34;stroke&#34;, &#34;#000000&#34;);&#xA;      line.setAttribute(&#34;stroke-width&#34;, &#34;1.5&#34;);&#xA;      line.setAttribute(&#34;fill&#34;, &#34;none&#34;);&#xA;      svg.appendChild(line);&#xA;      &#xA;      &#xA;      const xAxisY = yScale(0);&#xA;      &#xA;      &#xA;      const xTicks = [&#xA;        xExtent[0], &#xA;        Math.round((xExtent[0] + xExtent[1]) / 2), &#xA;        xExtent[1]&#xA;      ];&#xA;      &#xA;      xTicks.forEach(year =&gt; {&#xA;        const x = xScale(year);&#xA;        &#xA;        &#xA;        const tick = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;line&#34;);&#xA;        tick.setAttribute(&#34;x1&#34;, x);&#xA;        tick.setAttribute(&#34;y1&#34;, xAxisY);&#xA;        tick.setAttribute(&#34;x2&#34;, x);&#xA;        tick.setAttribute(&#34;y2&#34;, xAxisY + 3);&#xA;        tick.setAttribute(&#34;stroke&#34;, &#34;#666666&#34;);&#xA;        tick.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;        svg.appendChild(tick);&#xA;        &#xA;        &#xA;        const label = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        label.setAttribute(&#34;x&#34;, x);&#xA;        label.setAttribute(&#34;y&#34;, xAxisY + 15);&#xA;        label.setAttribute(&#34;text-anchor&#34;, &#34;middle&#34;);&#xA;        label.setAttribute(&#34;font-size&#34;, &#34;10&#34;);&#xA;        label.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        label.setAttribute(&#34;fill&#34;, &#34;#666666&#34;);&#xA;        label.textContent = year;&#xA;        svg.appendChild(label);&#xA;      });&#xA;      &#xA;      &#xA;      const xAxisLine = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;line&#34;);&#xA;      xAxisLine.setAttribute(&#34;x1&#34;, margin.left);&#xA;      xAxisLine.setAttribute(&#34;y1&#34;, xAxisY);&#xA;      xAxisLine.setAttribute(&#34;x2&#34;, margin.left + width);&#xA;      xAxisLine.setAttribute(&#34;y2&#34;, xAxisY);&#xA;      xAxisLine.setAttribute(&#34;stroke&#34;, &#34;#666666&#34;);&#xA;      xAxisLine.setAttribute(&#34;stroke-width&#34;, &#34;1&#34;);&#xA;      svg.appendChild(xAxisLine);&#xA;&#xA;      &#xA;      data.forEach(d =&gt; {&#xA;        const circle = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;circle&#34;);&#xA;        circle.setAttribute(&#34;cx&#34;, xScale(d.year));&#xA;        circle.setAttribute(&#34;cy&#34;, yScale(d.value));&#xA;        circle.setAttribute(&#34;r&#34;, &#34;2&#34;);&#xA;        circle.setAttribute(&#34;fill&#34;, &#34;#000000&#34;);&#xA;        &#xA;        &#xA;        const title = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;title&#34;);&#xA;        title.textContent = `${d.value.toFixed(1)} (${d.year})`;&#xA;        circle.appendChild(title);&#xA;        &#xA;        svg.appendChild(circle);&#xA;      });&#xA;      &#xA;      &#xA;      if (showArrow) {&#xA;        const progressData = data.filter(d =&gt; d.year &gt;= startPoint.year &amp;&amp; d.year &lt;= currentPoint.year);&#xA;        let progressPath = `M ${xScale(progressData[0].year)} ${yScale(progressData[0].value)}`;&#xA;        progressData.slice(1).forEach(d =&gt; {&#xA;          progressPath += ` L ${xScale(d.year)} ${yScale(d.value)}`;&#xA;        });&#xA;        &#xA;        const progressLine = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;        progressLine.setAttribute(&#34;d&#34;, progressPath);&#xA;        progressLine.setAttribute(&#34;stroke&#34;, &#34;#000000&#34;);&#xA;        progressLine.setAttribute(&#34;stroke-width&#34;, &#34;4&#34;);&#xA;        progressLine.setAttribute(&#34;stroke-opacity&#34;, &#34;0.6&#34;);&#xA;        progressLine.setAttribute(&#34;fill&#34;, &#34;none&#34;);&#xA;        progressLine.setAttribute(&#34;marker-end&#34;, &#34;url(#arrow)&#34;);&#xA;        svg.appendChild(progressLine);&#xA;        &#xA;        &#xA;        const defs = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;defs&#34;);&#xA;        const marker = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;marker&#34;);&#xA;        marker.setAttribute(&#34;id&#34;, &#34;arrow&#34;);&#xA;        marker.setAttribute(&#34;viewBox&#34;, &#34;0 0 10 6&#34;);&#xA;        marker.setAttribute(&#34;refX&#34;, &#34;0&#34;);&#xA;        marker.setAttribute(&#34;refY&#34;, &#34;3&#34;);&#xA;        marker.setAttribute(&#34;markerWidth&#34;, &#34;6&#34;);&#xA;        marker.setAttribute(&#34;markerHeight&#34;, &#34;5&#34;);&#xA;        marker.setAttribute(&#34;orient&#34;, &#34;auto&#34;);&#xA;        marker.setAttribute(&#34;markerUnits&#34;, &#34;strokeWidth&#34;);&#xA;        &#xA;        const arrowPath = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;path&#34;);&#xA;        arrowPath.setAttribute(&#34;d&#34;, &#34;M0,0 L0,6 L10,3 z&#34;);&#xA;        arrowPath.setAttribute(&#34;fill&#34;, &#34;#000000&#34;);&#xA;        arrowPath.setAttribute(&#34;fill-opacity&#34;, &#34;0.8&#34;);&#xA;        marker.appendChild(arrowPath);&#xA;        defs.appendChild(marker);&#xA;        svg.insertBefore(defs, svg.firstChild);&#xA;        &#xA;        &#xA;        const config = (direction === &#34;down&#34;)&#xA;          ? { start: &#34;below&#34;, end: &#34;above&#34; }&#xA;          : { start: &#34;above&#34;, end: &#34;below&#34; };&#xA;&#xA;        &#xA;        const distanceAbove = 22; &#xA;        const distanceBelow = 12; &#xA;        const startDistance = config.start === &#34;above&#34; ? distanceAbove : distanceBelow;&#xA;        const endDistance = config.end === &#34;above&#34; ? distanceAbove : distanceBelow;&#xA;&#xA;        &#xA;        const pts = data.map(d =&gt; ({ x: xScale(d.year), y: yScale(d.value) }));&#xA;        const yOnLine = (x) =&gt; {&#xA;          let best = pts[0];&#xA;          for (let i = 0; i &lt; pts.length - 1; i++) {&#xA;            const p0 = pts[i], p1 = pts[i + 1];&#xA;            const minX = Math.min(p0.x, p1.x), maxX = Math.max(p0.x, p1.x);&#xA;            if (x &gt;= minX &amp;&amp; x &lt;= maxX &amp;&amp; maxX !== minX) {&#xA;              const t = (x - p0.x) / (p1.x - p0.x);&#xA;              return p0.y + t * (p1.y - p0.y);&#xA;            }&#xA;            &#xA;            if (Math.abs(x - p0.x) &lt; Math.abs(x - best.x)) best = p0;&#xA;            if (Math.abs(x - p1.x) &lt; Math.abs(x - best.x)) best = p1;&#xA;          }&#xA;          return best.y;&#xA;        };&#xA;&#xA;        const clearanceAbove = 18; &#xA;        const clearanceBelow = 10; &#xA;&#xA;        const adjustLabelPair = (valueEl, yearEl, x, side) =&gt; {&#xA;          &#xA;          const vb = valueEl.getBBox();&#xA;          const yb = yearEl.getBBox();&#xA;          const gap = 12;&#xA;          const blockH = vb.height + gap + yb.height;&#xA;          const yLine = yOnLine(x);&#xA;&#xA;          if (side === &#39;above&#39;) {&#xA;            const bottom = yLine - clearanceAbove;&#xA;            const valueBaseline = bottom - yb.height - gap + (vb.height * 0.8);&#xA;            const yearBaseline = bottom - (yb.height * 0.2);&#xA;            valueEl.setAttribute(&#39;y&#39;, Math.max(margin.top + 15, valueBaseline));&#xA;            yearEl.setAttribute(&#39;y&#39;, Math.max(margin.top + 27, yearBaseline));&#xA;          } else { &#xA;            const top = yLine + clearanceBelow;&#xA;            const valueBaseline = top + (vb.height * 0.8);&#xA;            const yearBaseline = valueBaseline + gap + (yb.height * 0.8);&#xA;            valueEl.setAttribute(&#39;y&#39;, Math.min(margin.top + height - 15, valueBaseline));&#xA;            yearEl.setAttribute(&#39;y&#39;, Math.min(margin.top + height - 3, yearBaseline));&#xA;          }&#xA;        };&#xA;&#xA;        &#xA;        const getLabelPosition = (point, position, distance) =&gt; {&#xA;          const pointY = Math.max(margin.top + 10, Math.min(yScale(point.value), margin.top + height - 25));&#xA;          const pointX = xScale(point.year);&#xA;          &#xA;          if (position === &#34;above&#34;) {&#xA;            return {&#xA;              valueY: Math.max(margin.top + 15, pointY - distance),&#xA;              yearY: Math.max(margin.top + 27, pointY - (distance - 12)),&#xA;              x: pointX&#xA;            };&#xA;          } else if (position === &#34;below&#34;) {&#xA;            return {&#xA;              valueY: Math.min(margin.top + height - 15, pointY + distance),&#xA;              yearY: Math.min(margin.top + height - 3, pointY + distance + 12),&#xA;              x: pointX&#xA;            };&#xA;          } else if (position === &#34;left&#34;) {&#xA;            return {&#xA;              valueY: pointY - 6,&#xA;              yearY: pointY + 6,&#xA;              x: Math.max(margin.left + 25, pointX - 25)&#xA;            };&#xA;          } else if (position === &#34;right&#34;) {&#xA;            return {&#xA;              valueY: pointY - 6,&#xA;              yearY: pointY + 6,&#xA;              x: Math.min(margin.left + width - 25, pointX + 25)&#xA;            };&#xA;          }&#xA;        };&#xA;        &#xA;        &#xA;        const startPos = getLabelPosition(startPoint, config.start, startDistance);&#xA;        const startValueLabel = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        startValueLabel.setAttribute(&#34;x&#34;, startPos.x);&#xA;        startValueLabel.setAttribute(&#34;y&#34;, startPos.valueY);&#xA;        startValueLabel.setAttribute(&#34;text-anchor&#34;, config.start === &#34;left&#34; ? &#34;end&#34; : config.start === &#34;right&#34; ? &#34;start&#34; : &#34;middle&#34;);&#xA;        startValueLabel.setAttribute(&#34;font-size&#34;, &#34;18&#34;);&#xA;        startValueLabel.setAttribute(&#34;font-weight&#34;, &#34;bold&#34;);&#xA;        startValueLabel.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        startValueLabel.setAttribute(&#34;fill&#34;, &#34;#000000&#34;);&#xA;        startValueLabel.textContent = startPoint.value.toFixed(1);&#xA;        svg.appendChild(startValueLabel);&#xA;        &#xA;        const startYearLabel = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        startYearLabel.setAttribute(&#34;x&#34;, startPos.x);&#xA;        startYearLabel.setAttribute(&#34;y&#34;, startPos.yearY);&#xA;        startYearLabel.setAttribute(&#34;text-anchor&#34;, config.start === &#34;left&#34; ? &#34;end&#34; : config.start === &#34;right&#34; ? &#34;start&#34; : &#34;middle&#34;);&#xA;        startYearLabel.setAttribute(&#34;font-size&#34;, &#34;14&#34;);&#xA;        startYearLabel.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        startYearLabel.setAttribute(&#34;fill&#34;, &#34;#666666&#34;);&#xA;        startYearLabel.textContent = startPoint.year;&#xA;        svg.appendChild(startYearLabel);&#xA;&#xA;        &#xA;        const endPos = getLabelPosition(currentPoint, config.end, endDistance);&#xA;        const endValueLabel = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        endValueLabel.setAttribute(&#34;x&#34;, endPos.x);&#xA;        endValueLabel.setAttribute(&#34;y&#34;, endPos.valueY);&#xA;        endValueLabel.setAttribute(&#34;text-anchor&#34;, config.end === &#34;left&#34; ? &#34;end&#34; : config.end === &#34;right&#34; ? &#34;start&#34; : &#34;middle&#34;);&#xA;        endValueLabel.setAttribute(&#34;font-size&#34;, &#34;18&#34;);&#xA;        endValueLabel.setAttribute(&#34;font-weight&#34;, &#34;bold&#34;);&#xA;        endValueLabel.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        endValueLabel.setAttribute(&#34;fill&#34;, &#34;#000000&#34;);&#xA;        endValueLabel.textContent = currentPoint.value.toFixed(1);&#xA;        svg.appendChild(endValueLabel);&#xA;        &#xA;        const endYearLabel = document.createElementNS(&#34;http://www.w3.org/2000/svg&#34;, &#34;text&#34;);&#xA;        endYearLabel.setAttribute(&#34;x&#34;, endPos.x);&#xA;        endYearLabel.setAttribute(&#34;y&#34;, endPos.yearY);&#xA;        endYearLabel.setAttribute(&#34;text-anchor&#34;, config.end === &#34;left&#34; ? &#34;end&#34; : config.end === &#34;right&#34; ? &#34;start&#34; : &#34;middle&#34;);&#xA;        endYearLabel.setAttribute(&#34;font-size&#34;, &#34;14&#34;);&#xA;        endYearLabel.setAttribute(&#34;font-family&#34;, &#34;Helvetica, Arial, sans-serif&#34;);&#xA;        endYearLabel.setAttribute(&#34;fill&#34;, &#34;#666666&#34;);&#xA;        endYearLabel.textContent = currentPoint.year;&#xA;        svg.appendChild(endYearLabel);&#xA;&#xA;        &#xA;        adjustLabelPair(startValueLabel, startYearLabel, xScale(startPoint.year), config.start);&#xA;        adjustLabelPair(endValueLabel, endYearLabel, xScale(currentPoint.year), config.end);&#xA;&#xA;      }&#xA;      &#xA;      container.appendChild(svg);&#xA;    })();&#xA;  &lt;/script&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;chart-section&#34;&gt;&#xA;&lt;div class=&#34;chart-section-header&#34;&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;oil-spills&#34;&gt;&#xA;  Oil Spills&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oil-spills&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;1,000 tons spilled per year&lt;/p&gt;</description>
    </item>
    <item>
      <title>What I learned at Substack</title>
      <link>http://localhost:1313/writing/learned/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writing/learned/</guid>
      <description>&lt;p&gt;In software engineering, we often focus on the technical side of our work—designing scalable systems, writing clean code, and mastering our tools. But the most impactful lessons are often learned in the spaces between the pull requests. They&amp;rsquo;re about people, trust, and self-awareness. Here are a few hard-learned lessons from my time building and scaling infrastructure.&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;lesson-1-a-technical-win-can-be-a-team-loss&#34;&gt;&#xA;  Lesson 1: A Technical Win Can Be a Team Loss&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lesson-1-a-technical-win-can-be-a-team-loss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;When I joined Substack, the company was running on about 40 Heroku dynos. A migration to AWS had been discussed, but three months into my tenure, no real movement had occurred.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Real-Time Infrastructure at Substack</title>
      <link>http://localhost:1313/writing/zync/</link>
      <pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writing/zync/</guid>
      <description>How we built a scalable real-time Pub/Sub system that handles a billion messages per week.</description>
    </item>
    <item>
      <title>Principles</title>
      <link>http://localhost:1313/writing/principles/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writing/principles/</guid>
      <description>A collection of personal principles.</description>
    </item>
  </channel>
</rss>
